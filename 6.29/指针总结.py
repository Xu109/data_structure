"""
Author:  Mr.Xu
Create:  2020/6/29 1:17
Github:  https://github.com/Xu109
Copyright (c) 2020, Mr.Xu Group All Rights Reserved.
"""
"""
指针总结:
我们在进行算法编写过程中,经常用到指针的思想,来协助我们解决问题,这里来总结下常用的三种指针:

一.快慢指针
快慢指针是两个指针从同一侧开始遍历数组，将这两个指针分别定义为快指针（fast）和慢指针（slow），两个指针以不同的策略移动，直到两个指针达到相应条件为止.
这种适合用于那种应该一步一步从头开始判断的类型.
比如判断链表是否有环,快指针（fast）每次增长两个，慢指针（slow）每次增长一个,如果出现重合,那必然有环.
或者去除重复值,删除指定值等,这些情况总会对数组中元素进行遍历,这种一一检查的情况,则体现了快慢指针的另一核心思想,
即用慢指针的位置来保存满足条件的值(比如非重复值,非指定值),而快指针则负责遍历,一旦满足条件,就传给慢指针对应的地方,既不使用其他更多的空间,又能保证算法稳定性.

二.对撞指针
在数组中，将指向最左侧的索引定义为左指针（left），最右侧的定义为右指针（right），然后从两头向中间进行数组遍历。
这样的方法无疑加快了遍历速度,当出现特定需求,比如计算两数之和,三数之和,如果用快慢指针则需要一层一层遍历,未免过于粗暴,算法复杂度也有可能是o(n^2)或者o(n^3).
对于和是一个固定的值,我们不妨让指针从两边开始移动,构成对撞指针.通过循环让两个指针向中间靠拢,left在左,right在右,
如果大于固定值,就把指向大数的右指针向左移,使和减小,相反则把指向小数的左指针向右移,使和增大,当然这是需要是在有序数组的前提下计算的.
三数之和也是大同小异,固定其中一值,再移动其余两数.
同样,二分查找也是运用了同种思想,定义左右指针,对中值进行计算,然后判断目标值的位置,让左指针或者右指针等于中值,然后继续进行新的中值计算,一层一层找到查找值.
最终左右指针收敛范围足够小,离查找值足够接近,那么找到那个查找值也就是水到渠成.

三.分离指针.
有时候,一些题目并不只包含一个数组,而是包含多个,比如给出两个数组的交集,或者合并两个有序数组,那么判断的时候就要从两个数组中进行对比,
那我们的指针也一定是分别出现在两个不同的数组中的,这样才能同时找到两个数组中想要的值.
比如找交集,那我们一定是判断两个数组中的数.将两个数组排好序后,我们就可以从开始一一对应值,哪边的数小,指针就向后移,找到相等的值就加到集合或列表里
(如果加到集合里就自动去重,如果是列表后面还要把重复的那些值去掉),这样就能给出我们需要的交集,两边的指针互不影响,分别去取不同数组下的元素.
合并两个有序数组时,也是在排序之后,先留好空间m+n,在两个不同的数组里找到最大值,从后向前一个一个添加进去,
如果这其中有指针已经走到了头,那么另外一个数组剩下的值都是小的,将它们按顺序继续全部添加进即可.

"""